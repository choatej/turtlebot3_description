name: Create Release
on:
  workflow_dispatch:
    inputs:
        tag:
            description: 'Tag to create release for'
            required: true
            default: 'v0.0.0'
  push:
    tags:
      - 'v*.*.*'

jobs:
  get_tag:
    outputs:
        tag: ${{ steps.get_tag.outputs.tag }}
    runs-on: ubuntu-latest
    steps:
      - name: Get the tag
        id: get_tag
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=v0.0.0" >> $GITHUB_OUTPUT
          fi
  generate_urdf:
    runs-on: ubuntu-latest
    container: ros:iron
    outputs:
        artifact_key: ${{ env.artifact_key }}
        artifact_file: ${{ env.artifact_file }}
    env:
        artifact_key: turtlebot3_urdf
        artifact_file: turtlebot3_urdf.tar.gz
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: src/turtlebot3_description
    - name: install dependencies
      run:  sudo apt-get update && rosdep update && rosdep install --from-paths src -r -y
    - name: Generate URDF files
      shell: bash
      run: |
        source /opt/ros/iron/setup.bash
        colcon build --packages-select turtlebot3_description
        source ./install/setup.bash
        xacro src/turtlebot3_description/urdf/turtlebot3_burger.urdf.xacro -o turtlebot3.urdf
        tar -czvf ${artifact_file} install/turtlebot3_description/
    - name: Upload URDF artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact_key }}
        path: ${{ env.artifct_file }}

  build_docker:
    runs-on: ubuntu-latest
    needs: [get_tag]
    outputs:
      tagged_image_name: ${{ steps.build_docker_image.outputs.tagged_image_name }}
      image_file: ${{ steps.upload_docker_image.outputs.image_file }}
      artifact_key: ${{ env.artifact_key }}
    env:
      tag: ${{ needs.get_tag.outputs.tag }}
      image_name: ${{ github.repository }}
      artifact_key: docker_image
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Build Docker image
      id: build_docker_image
      run: |
        tagged_image_name=${image_name}:${tag}
        docker build -t ${tagged_image_name} -f ./docker/Dockerfile .
        echo "tagged_image_name=${tagged_image_name}" >> $GITHUB_OUTPUT
    - name: Save Docker image as tar
      id: upload_docker_image
      run: |
        outfile_basename=$(echo ${image_name} | tr '/' '-')
        outfile_name=${outfile_basename}-${tag}.tar
        echo "image_file=${outfile_name}" >> $GITHUB_OUTPUT
        docker save ${{ steps.build_docker_image.outputs.tagged_image_name }} -o ${outfile_name}
        echo 

    - name: Upload Docker image tar artifact
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: ${artifact_key}
        path: ${{ steps.upload_docker_image.outputs.image_file }}

  create_release:
    runs-on: ubuntu-latest
    needs: [get_tag, generate_urdf, build_docker]
    env:
        tag: ${{ needs.get_tag.outputs.tag }}
        image_name: ${{ needs.build_docker.outputs.tagged_image_name }}
        source_archive: source_code_${tag}.tar.gz
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Download URDF artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.generate_urdf.outputs.artifact_key }}
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build_docker.outputs.artifact_key }}
    - name: Archive source code
      run: |
        git archive --format=tar.gz --output=${{ env.source_archive }} ${tag}
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ needs.generate_urdf.outputs.artifact_file }}
          ${{ env.source_archive }}
          ${{ needs.build_docker.outputs.image_file }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
