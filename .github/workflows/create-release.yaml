name: Create Release
on:
  workflow_dispatch:
    inputs:
        tag:
            description: 'Tag to create release for'
            required: true
            default: 'v0.0.0'
  push:
    tags:
      - 'v*.*.*'
env:
  urdf_file_path: urdf/turtlebot3_burger.urdf.xacro
jobs:
  get_derived_names:
    outputs:
        tag: ${{ steps.derive_names.outputs.tag }}
        repo_name: ${{ steps.derive_names.outputs.repo_name }}
        urdf_source_file_path: src/${{ steps.derive_names.outputs.repo_name }}/${{ env.urdf_file_path }}
        urdf_artifact_file: ${{ steps.derive_names.outputs.urdf_artifact_file }}
        urdf_artifact_key: ${{ steps.derive_names.outputs.urdf_artifact_key }}
        docker_artifact_key: ${{ steps.derive_names.outputs.docker_artifact_key }}
        docker_image_name: ${{ steps.derive_names.outputs.repo_name }}
        docker_image_file: ${{ steps.derive_names.outputs.docker_image_file }}
    runs-on: ubuntu-latest
    steps:
      - name: Derive Names
        id: derive_names
        run: |
          tag="v0.0.0"
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            tag=${GITHUB_REF#refs/tags/}
          elif [ -n "${{ github.event.inputs.tag }}" ]; then
            tag=${{ github.event.inputs.tag }}
          fi
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          repo_name=$(echo "${{ github.repository }}" | sed -e 's/.*\///g')
          echo "repo_name=${repo_name}" >> $GITHUB_OUTPUT
          echo "urdf_artifact_file=${repo_name}.urdf" >> $GITHUB_OUTPUT
          echo "urdf_artifact_key=${repo_name}_urdf" >> $GITHUB_OUTPUT
          echo "docker_artifact_key=${repo_name}_docker" >> $GITHUB_OUTPUT
          echo "docker_image_file=${{ github.repository_owner }}-${repo_name}_${tag}_docker.tar.gz" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
  generate_urdf:
    if: false
    runs-on: ubuntu-latest
    needs: [get_derived_names]
    container: ros:iron
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: src/turtlebot3_description
    - name: install dependencies
      run:  sudo apt-get update && rosdep update && rosdep install --from-paths src -r -y
    - name: Generate URDF files
      shell: bash
      run: |
        source /opt/ros/iron/setup.bash
        colcon build --packages-select ${{ needs.get_derived_names.outputs.repo_name }}
        source ./install/setup.bash
        xacro ${{ needs.get_derived_names.outputs.urdf_source_file_path }} -o ${{ needs.get_derived_names.outputs.urdf_artifact_file }}
    - name: Upload URDF artifact
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: ${{ needs.get_derived_names.outputs.urdf_artifact_key }}
        path: ${{ needs.get_derived_names.outputs.urdf_artifact_file }}

  build_docker:
    runs-on: ubuntu-latest
    needs: [get_derived_names]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-
    - name: Build Docker image
      id: build_docker_image
      run: |
        tagged_image_name=${{ needs.get_derived_names.outputs.docker_image_name }}:${{ github.sha }}
        docker build -t ghcr.io/${{ github.repository_owner }}/${{  needs.get_derived_names.outputs.docker_image_name }}:${{ github.sha }} -f ./docker/Dockerfile .
    - name: Log in to GHCR
      run: echo "${{ secrets.RELEASE_BUILDER_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Tag Docker image
      run: |
        docker tag ghcr.io/${{ github.repository_owner }}/${{  needs.get_derived_names.outputs.docker_image_name }}:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/${{  needs.get_derived_names.outputs.docker_image_name }}:latest
        docker tag ghcr.io/${{ github.repository_owner }}/${{  needs.get_derived_names.outputs.docker_image_name }}:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/${{  needs.get_derived_names.outputs.docker_image_name }}:${{ needs.get_derived_names.outputs.tag }}
    - name: Push Docker image (SHA tag)
      run: docker push ghcr.io/${{ github.repository_owner }}/${{  needs.get_derived_names.outputs.docker_image_name }}:${{ github.sha }}
    - name: Push Docker image (latest tag)
      run: docker push ghcr.io/${{ github.repository_owner }}/${{  needs.get_derived_names.outputs.docker_image_name }}:latest
    - name: Push Docker image (version tag)
      run: docker push ghcr.io/${{ github.repository_owner }}/${{  needs.get_derived_names.outputs.docker_image_name }}:${{ needs.get_derived_names.outputs.tag }}
    - name: Save Docker image as tar
      id: upload_docker_image
      run: |
        docker save ${{ steps.build_docker_image.outputs.tagged_image_name }} | gzip > ${{ needs.get_derived_names.outputs.docker_image_file }}
    - name: Upload Docker image tar artifact
      id: upload_image_artifact
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: ${{ needs.get_derived_names.outputs.docker_artifact_key }}
        path: ${{ needs.get_derived_names.outputs.docker_image_file }}
    - name: Get asset URL
      id: get_asset_url
      run: |
        echo "artifact url: ${{ steps.upload_docker_image.outputs.artifact_url }}"
  create_release:
    if: false
    runs-on: ubuntu-latest
    needs: [get_derived_names, generate_urdf, build_docker]
    env:
      source_archive: ${{ github.repository_owner }}-${{ needs.get_derived_names.outputs.repo_name }}_${{ needs.get_derived_names.outputs.tag }}_source.tar.gz
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-tags: true
    - name: fetch tags # This is a workaround for the issue with the checkout action not fetching tags
      run: git fetch --tags
    - name: Download URDF artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.get_derived_names.outputs.urdf_artifact_key }}
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.get_derived_names.outputs.docker_artifact_key }}
    - name: Archive source code
      run: git archive --format=tar.gz --output=${{ env.source_archive }} ${{ needs.get_derived_names.outputs.tag }}
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.get_derived_names.outputs.tag }}
        files: |
          ${{ needs.get_derived_names.outputs.docker_image_file }}
          ${{ env.source_archive }}
          ${{ needs.get_derived_names.outputs.urdf_artifact_file }}
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_BUILDER_TOKEN }}
